class Solution {
public:
    int wildCard(string pattern, string str) {
        int n = pattern.size();
        int m = str.size();
        
        // DP table initialized to 0
        vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));
        
        // Base case: empty pattern matches an empty string
        dp[n][m] = 1;
        
        // Fill dp table for when string is empty but pattern contains characters
        for (int i = n - 1; i >= 0; --i) {
            if (pattern[i] == '*') {
                dp[i][m] = dp[i + 1][m];
            } else {
                dp[i][m] = 0;
            }
        }
        
        // Fill the dp table
        for (int i = n - 1; i >= 0; --i) {
            for (int j = m - 1; j >= 0; --j) {
                if (pattern[i] == '?') {
                    dp[i][j] = dp[i + 1][j + 1];
                } else if (pattern[i] == '*') {
                    dp[i][j] = dp[i + 1][j] || dp[i][j + 1];
                } else {
                    dp[i][j] = (pattern[i] == str[j]) && dp[i + 1][j + 1];
                }
            }
        }
        
        // Result is whether the entire pattern matches the entire string
        return dp[0][0];
    }
};
