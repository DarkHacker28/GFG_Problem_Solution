
class Solution {
public:
    int kthElement(int k, vector<int>& arr1, vector<int>& arr2) {
        // Ensure arr1 is the smaller array for simplicity
        if (arr1.size() > arr2.size()) {
            return kthElement(k, arr2, arr1);
        }
        
        int n = arr1.size();
        int m = arr2.size();
        int low = max(0, k - m);
        int high = min(k, n);
        
        while (low <= high) {
            int i = low + (high - low) / 2;
            int j = k - i;
            
            int Aleft = (i == 0) ? INT_MIN : arr1[i - 1];
            int Aright = (i == n) ? INT_MAX : arr1[i];
            int Bleft = (j == 0) ? INT_MIN : arr2[j - 1];
            int Bright = (j == m) ? INT_MAX : arr2[j];
            
            if (Aleft <= Bright && Bleft <= Aright) {
                return max(Aleft, Bleft);
            } else if (Aleft > Bright) {
                high = i - 1;
            } else {
                low = i + 1;
            }
        }
        
        throw invalid_argument("Input arrays are not valid.");
    }
};
