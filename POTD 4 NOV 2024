class Solution {
  public:
    vector<vector<int>> findTriplets(vector<int> &arr) {
        
        vector<vector<int>>result; // result 
        map<int,vector<int>>mp; // map to store element and its occurring index
        size_t n = arr.size(); 
       
        // iterate through array
        // on element occurrence, push its index in map
        for(size_t i = 0 ; i < n ; i++) {
            
            // arr[i] element has not occurred before
            // push {i} 
            if(mp.find(arr[i]) == mp.end()) {
                mp[arr[i]] = {i};
            }
            else {
            // arr[i] element HAS occurred before
            // push 'i' into the list of indices
                mp[arr[i]].push_back(i);
            }
        }
        
        // iterate through all possible pairs of indices {i,j}
        // where j > i
        // check if sum = (-1) * (arr[i] + arr[j]) exists in map
        // if exists , it means there MIGHT exist an index 'k'
        // where arr[k] = -(arr[i] + arr[j])
        
        // iterate through the map and check 
        // whether an index > j exists , if exists , push as triplet
        for(size_t i = 0 ; i < n ; i++) {
            for(size_t j = i + 1 ; j < n ; j++) {
                int target = (-1) * (arr[i] + arr[j]);
                if(mp.find(target) != mp.end()) {
                       for(auto index : mp[target]) {
                           if(index > j) {
                               result.push_back({i , j , index});
                           }
                       }
                   }
            }
        }
        return result;
    }
};
