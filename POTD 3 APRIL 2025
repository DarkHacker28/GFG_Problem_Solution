class Solution {
  public:
  
  
  
    int orangesRotting(vector<vector<int>>& mat) {
        // Code here
        int n=mat.size();
        int m=mat[0].size();
        int time=0;
        int freshOrange=0;
        queue<pair<pair<int,int>,int>>q;
        int dx[]={-1,1,0,0};
        int dy[]={0,0,-1,1};
        for(int i=0;i<n;++i){
            for(int j=0;j<m;++j){
                if(mat[i][j]==1){
                    freshOrange++;
                }
                if(mat[i][j]==2){
                    q.push({{i,j},0});
                }
            }
        }
        while(!q.empty()){
            auto p=q.front();
            q.pop();
            int r=p.first.first;
            int c=p.first.second;
            int currTime=p.second;
            time=max(currTime,time);
            for(int i=0;i<4;++i){
                int col=c+dy[i];
                int row=r+dx[i];
                if(col>=0 && col < m && row>=0 && row<n && mat[row][col]==1 ){
                    mat[row][col]=2;
                    freshOrange--;
                    q.push({{row,col},currTime+1});
                }
            }
            
        }
        if(freshOrange==0) return time;
        return -1;
    }
};
